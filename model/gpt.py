import os
from openai import OpenAI
from dotenv import load_dotenv
import json
import requests

load_dotenv()

class GPTAssistant:
    def __init__(self):
        self.token = os.getenv("GITHUB_TOKEN")
        self.endpoint = "https://models.inference.ai.azure.com"
        self.model_name = "gpt-4o-mini"
        self.client = OpenAI(
            base_url=self.endpoint,
            api_key=self.token,
        )
        self.tools = [
            {
                "type": "function",
                "function": {
                    "name": "get_categories",
                    "description": "Get list of product categories from store",
                    "parameters": {
                        "type": "object",
                        "properties": {},
                        "required": []
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "get_top_food",
                    "description": "Get top 5 food from store",
                    "parameters": {
                        "type": "object",
                        "properties": {},
                        "required": []
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "get_service",
                    "description": "Get service by name",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "category_name": {
                                "type": "string",
                                "description": "Category name",
                                "example": "Food, Drinks, Laundry, etc"
                            }
                        },
                        "required": []
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "get_top_restaurants",
                    "description": "Get top N restaurants by service ID",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "service_id": {
                                "type": "integer",
                                "description": "Service ID to filter restaurants",
                            },
                            "limit": {
                                "type": "integer",
                                "description": "Number of restaurants to return (default 10)",
                            }
                        },
                        "required": []
                    }
                }
            }
        ]

    def get_categories(self):
        """Get list of product categories from store"""
        response = requests.get("https://huyitshop.online:444/api/v1/categories")
        data = response.json()
        categories = []
        for category in data["result"]:
            # Skip the "T·∫•t c·∫£" category
            if category["categoryName"].lower() != "t·∫•t c·∫£":
                categories.append({
                    "name": category["categoryName"],
                    "id": category["categoryId"],
                    "sequence": category["categorySeq"]
                })
        return json.dumps({"categories": categories}, ensure_ascii=False)

    def get_top_food(self):
      """Get top 5 food from store"""
      response = requests.get("https://huyitshop.online:444/api/v1/main-advertisements/top-food")
      data = response.json()
      products = []
      for product in data["result"]:
        products.append({
        "name": product["mainAdvertisementName"],
        "id": product["advertisementId"],
        "price": product["priceRangeLow"],
        "address": product["address"],
        "phoneNumber": product["phoneNumber"],
        "priceRangeLow": product["priceRangeLow"],
        "priceRangeHigh": product["priceRangeHigh"],
        "imageLink": product["mediaList"][0]["url"] if product["mediaList"] else None
        })
      return json.dumps({"products": products}, ensure_ascii=False)

    def get_service(self, category_name: str = ""):
        """Get service by name"""
        response = requests.get(f"https://huyitshop.online:444/api/v1/advertisement-services/category?categoryName={category_name}")
        data = response.json()
        services = []
        for service in data["result"]:
            services.append({
                "name": service["serviceName"],
                "id": service["serviceId"],
                "deliveryAvailable": service["deliveryAvailable"]
            })
        return json.dumps({"services": services}, ensure_ascii=False)

    def get_top_restaurants(self, service_id: int = 0, limit: int = 10):
        """Get top restaurants by service ID"""
        response = requests.get(f"https://huyitshop.online:444/api/v1/main-advertisements/top-restaurants?serviceId={service_id}&limit={limit}")
        data = response.json()
        restaurants = []
        for restaurant in data["result"]:
            restaurants.append({
                "name": restaurant["mainAdvertisementName"],
                "id": restaurant["advertisementId"],
                "serviceId": restaurant["serviceId"],
                "categoryName": restaurant["categoryName"],
                "serviceName": restaurant["serviceName"],
                "address": restaurant["address"],
                "phoneNumber": restaurant["phoneNumber"],
                "priceRangeLow": restaurant["priceRangeLow"],
                "priceRangeHigh": restaurant["priceRangeHigh"],
                "openingHourStart": restaurant["openingHourStart"],
                "openingHourEnd": restaurant["openingHourEnd"],
                "deliveryAvailable": restaurant["deliveryAvailable"],
                "averageRating": restaurant["averageRating"],
                "reviewCount": restaurant["reviewCount"],
                "imageLink": restaurant["mediaList"][0]["url"] if restaurant["mediaList"] else None
            })
        return json.dumps({"restaurants": restaurants}, ensure_ascii=False)

    def process_message(self, user_message: str):
        print(user_message)

        # Check if message is a greeting
        greetings = [
            "xin ch√†o", "hi", "hello", "ch√†o",
            "b·∫°n c√≥ th·ªÉ gi√∫p cho t√¥i", "b·∫°n c√≥ th·ªÉ gi√∫p t√¥i",
            "cho t√¥i h·ªèi", "t√¥i c·∫ßn h·ªèi", "t√¥i mu·ªën h·ªèi",
            "ch√†o b·∫°n", "hey", "c√≥ ai kh√¥ng",
            "b·∫°n ∆°i", "alo", "gi√∫p t√¥i", "gi√∫p m√¨nh",
            "m√¨nh c·∫ßn h·ªèi", "m√¨nh mu·ªën h·ªèi",
            "ch√†o shop", "shop ∆°i", "c·ª≠a h√†ng ∆°i",
            "c√≥ th·ªÉ gi√∫p m√¨nh", "c·∫ßn t∆∞ v·∫•n"
        ]
        if any(greeting in user_message.lower() for greeting in greetings):
            return self.client.chat.completions.create(
                messages=[
                    {"role": "system", "content": "B·∫°n l√† chatbot AI c·ªßa dichvuhungngan. H√£y ch√†o ƒë√≥n ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·ªán."},
                    {"role": "user", "content": user_message},
                    {"role": "assistant", "content": "Xin ch√†o! T√¥i l√† chatbot AI c·ªßa dichvuhungngan. T√¥i c√≥ th·ªÉ gi√∫p g√¨ ƒë∆∞·ª£c cho b·∫°n?"}
                ],
                model=self.model_name,
            )

        # Original system message and logic for non-greeting messages
        messages = [
            {"role": "system", "content": """
          B·∫°n l√† chatbot AI c·ªßa dichvuhungngan. H√£y tr·∫£ l·ªùi v·ªõi phong c√°ch th√¢n thi·ªán, nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp:

          1. V·ªõi danh s√°ch m√≥n ƒÉn/nh√† h√†ng, h√£y hi·ªÉn th·ªã:
            "D·∫°, em xin gi·ªõi thi·ªáu ƒë·∫øn anh/ch·ªã nh·ªØng m√≥n ƒÉn n·ªïi b·∫≠t c·ªßa ch√∫ng em ·∫°:"

            [STT]. [T√™n]
            - Gi√°: [Gi√°] VNƒê
            - ƒê·ªãa ch·ªâ: [ƒê·ªãa ch·ªâ]
            - ƒêi·ªán tho·∫°i: [S·ªë ƒëi·ªán tho·∫°i]

          2. V·ªõi danh s√°ch danh m·ª•c/d·ªãch v·ª• ch√≠nh, h√£y hi·ªÉn th·ªã:
            "D·∫°, em xin ph√©p chia s·∫ª c√°c d·ªãch v·ª• hi·ªán c√≥ c·ªßa dichvuhungngan ·∫°:"

            üè™ DANH S√ÅCH D·ªäCH V·ª§ CH√çNH:

            [STT]. [T√™n danh m·ª•c] üìç

          3. V·ªõi danh s√°ch d·ªãch v·ª• theo danh m·ª•c, h√£y hi·ªÉn th·ªã:
            "D·∫°, trong lƒ©nh v·ª±c [T√™n danh m·ª•c], ch√∫ng em c√≥ c√°c d·ªãch v·ª• sau ·∫°:"

            üìå C√ÅC D·ªäCH V·ª§ [T√äN DANH M·ª§C]:

            [STT]. [T√™n d·ªãch v·ª•]
            ‚úÖ Giao h√†ng: [C√≥/Kh√¥ng]

          4. C√°c c√¢u m·ªü ƒë·∫ßu n√™n thay ƒë·ªïi ƒëa d·∫°ng:
            - "D·∫°, em xin ph√©p t∆∞ v·∫•n cho anh/ch·ªã..."
            - "Em r·∫•t vui ƒë∆∞·ª£c chia s·∫ª v·ªõi anh/ch·ªã..."
            - "ƒê·ªÉ ph·ª•c v·ª• anh/ch·ªã t·ªët nh·∫•t, em xin gi·ªõi thi·ªáu..."
            - "D·∫°, em xin g·ª≠i ƒë·∫øn anh/ch·ªã th√¥ng tin v·ªÅ..."
            - "Em r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c gi·ªõi thi·ªáu ƒë·∫øn anh/ch·ªã..."

          5. C√°c c√¢u k·∫øt th√∫c n√™n g·ª£i m·ªü v√† th√¢n thi·ªán:
            - "Anh/ch·ªã quan t√¢m ƒë·∫øn d·ªãch v·ª• n√†o trong s·ªë n√†y kh√¥ng ·∫°?"
            - "Em c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt h∆°n v·ªÅ b·∫•t k·ª≥ d·ªãch v·ª• n√†o anh/ch·ªã quan t√¢m ·∫°"
            - "N·∫øu anh/ch·ªã c·∫ßn th√™m th√¥ng tin v·ªÅ d·ªãch v·ª• n√†o, em r·∫•t s·∫µn l√≤ng h·ªó tr·ª£ ·∫°"
            - "Anh/ch·ªã mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ d·ªãch v·ª• n√†o kh√¥ng ·∫°?"
            - "Em c√≥ th·ªÉ gi√∫p g√¨ th√™m cho anh/ch·ªã kh√¥ng ·∫°?"

          6. Khi kh√¥ng c√≥ th√¥ng tin:
            "D·∫°, em xin l·ªói anh/ch·ªã. Hi·ªán t·∫°i em ch∆∞a c√≥ th√¥ng tin v·ªÅ d·ªãch v·ª• n√†y ·∫°. Em c√≥ th·ªÉ gi·ªõi thi·ªáu cho anh/ch·ªã m·ªôt s·ªë d·ªãch v·ª• kh√°c ph√π h·ª£p kh√¥ng ·∫°?"

          7. V·ªõi l·ªùi ch√†o:
            "Xin ch√†o anh/ch·ªã! Em l√† tr·ª£ l√Ω ·∫£o c·ªßa dichvuhungngan. Em r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ anh/ch·ªã t√¨m hi·ªÉu v·ªÅ c√°c d·ªãch v·ª• c·ªßa ch√∫ng em ·∫°."

          B·∫£ng √°nh x·∫° danh m·ª•c:
          - Th·ª©c ƒÉn -> food
          - ƒê·ªì u·ªëng -> drinks
          - Gi·∫∑t ·ªßi -> laundry
          - D·∫°y h·ªçc -> teaching
          - ƒêi·ªán t·ª≠-Vi T√≠nh -> electronics
          - V·∫≠n t·∫£i -> transport
          - L√†m ƒë·∫πp -> beauty

          L∆∞u √Ω:
          - Lu√¥n gi·ªØ gi·ªçng ƒëi·ªáu l·ªãch s·ª±, nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp
          - S·ª≠ d·ª•ng t·ª´ ng·ªØ t√¥n tr·ªçng nh∆∞ "anh/ch·ªã"
          - Th√™m t·ª´ "d·∫°", "·∫°" ƒë·ªÉ th·ªÉ hi·ªán s·ª± l·ªãch s·ª±
          - Lu√¥n s·∫µn s√†ng h·ªó tr·ª£ th√™m
          - T·∫°o c·∫£m gi√°c g·∫ßn g≈©i, th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng
          """},
            {"role": "user", "content": user_message}
        ]

        response = self.client.chat.completions.create(
            messages=messages,
            tools=self.tools,
            model=self.model_name,
        )

        if response.choices[0].finish_reason == "tool_calls":
            messages.append(response.choices[0].message)

            for tool_call in response.choices[0].message.tool_calls:
                if tool_call.type == "function":
                    function_args = json.loads(tool_call.function.arguments.replace("'", '"'))
                    print(f"Calling function `{tool_call.function.name}` with arguments {function_args}")
                    callable_func = getattr(self, tool_call.function.name)
                    function_return = callable_func(**function_args)
                    print(f"Function returned = {function_return}")

                    messages.append(
                        {
                            "tool_call_id": tool_call.id,
                            "role": "tool",
                            "name": tool_call.function.name,
                            "content": function_return,
                        }
                    )

            response = self.client.chat.completions.create(
                messages=messages,
                tools=self.tools,
                model=self.model_name,
            )

        return response

